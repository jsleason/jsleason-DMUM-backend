"use strict";
// Copyright IBM Corp. 2017. All Rights Reserved.
// Node module: @loopback/repository
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
Object.defineProperty(exports, "__esModule", { value: true });
const context_1 = require("@loopback/context");
// tslint:disable:no-any
var RelationType;
(function (RelationType) {
    RelationType[RelationType["belongsTo"] = 0] = "belongsTo";
    RelationType[RelationType["hasOne"] = 1] = "hasOne";
    RelationType[RelationType["hasMany"] = 2] = "hasMany";
    RelationType[RelationType["embedsOne"] = 3] = "embedsOne";
    RelationType[RelationType["embedsMany"] = 4] = "embedsMany";
    RelationType[RelationType["referencesOne"] = 5] = "referencesOne";
    RelationType[RelationType["referencesMany"] = 6] = "referencesMany";
})(RelationType = exports.RelationType || (exports.RelationType = {}));
exports.RELATIONS_KEY = 'loopback:relations';
class RelationMetadata {
}
exports.RelationMetadata = RelationMetadata;
/**
 * Decorator for relations
 * @param definition
 * @returns {(target:any, key:string)}
 */
function relation(definition) {
    // Apply relation definition to the model class
    return context_1.PropertyDecoratorFactory.createDecorator(exports.RELATIONS_KEY, definition);
}
exports.relation = relation;
/**
 * Decorator for belongsTo
 * @param definition
 * @returns {(target:any, key:string)}
 */
function belongsTo(definition) {
    // Apply model definition to the model class
    const rel = Object.assign({ type: RelationType.belongsTo }, definition);
    return context_1.PropertyDecoratorFactory.createDecorator(exports.RELATIONS_KEY, rel);
}
exports.belongsTo = belongsTo;
/**
 * Decorator for hasOne
 * @param definition
 * @returns {(target:any, key:string)}
 */
function hasOne(definition) {
    const rel = Object.assign({ type: RelationType.hasOne }, definition);
    return context_1.PropertyDecoratorFactory.createDecorator(exports.RELATIONS_KEY, rel);
}
exports.hasOne = hasOne;
/**
 * Decorator for hasMany
 * @param definition
 * @returns {(target:any, key:string)}
 */
function hasMany(definition) {
    const rel = Object.assign({ type: RelationType.hasMany }, definition);
    return context_1.PropertyDecoratorFactory.createDecorator(exports.RELATIONS_KEY, rel);
}
exports.hasMany = hasMany;
/**
 * Decorator for embedsOne
 * @param definition
 * @returns {(target:any, key:string)}
 */
function embedsOne(definition) {
    const rel = Object.assign({ type: RelationType.embedsOne }, definition);
    return context_1.PropertyDecoratorFactory.createDecorator(exports.RELATIONS_KEY, rel);
}
exports.embedsOne = embedsOne;
/**
 * Decorator for embedsMany
 * @param definition
 * @returns {(target:any, key:string)}
 */
function embedsMany(definition) {
    const rel = Object.assign({ type: RelationType.embedsMany }, definition);
    return context_1.PropertyDecoratorFactory.createDecorator(exports.RELATIONS_KEY, rel);
}
exports.embedsMany = embedsMany;
/**
 * Decorator for referencesOne
 * @param definition
 * @returns {(target:any, key:string)}
 */
function referencesOne(definition) {
    const rel = Object.assign({ type: RelationType.referencesOne }, definition);
    return context_1.PropertyDecoratorFactory.createDecorator(exports.RELATIONS_KEY, rel);
}
exports.referencesOne = referencesOne;
/**
 * Decorator for referencesMany
 * @param definition
 * @returns {(target:any, key:string)}
 */
function referencesMany(definition) {
    const rel = Object.assign({ type: RelationType.referencesMany }, definition);
    return context_1.PropertyDecoratorFactory.createDecorator(exports.RELATIONS_KEY, rel);
}
exports.referencesMany = referencesMany;
//# sourceMappingURL=relation.decorator.js.map