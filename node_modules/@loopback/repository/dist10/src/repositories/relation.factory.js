"use strict";
// Copyright IBM Corp. 2017,2018. All Rights Reserved.
// Node module: @loopback/example-todo
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
Object.defineProperty(exports, "__esModule", { value: true });
const relation_decorator_1 = require("../decorators/relation.decorator");
const relation_repository_1 = require("./relation.repository");
/**
 * Enforces a constraint on a repository based on a relationship contract
 * between models. Returns a relational repository that exposes applicable CRUD
 * method APIs for the related target repository. For example, if a Customer model is
 * related to an Order model via a HasMany relation, then, the relational
 * repository returned by this method would be constrained by a Customer model
 * instance's id(s).
 *
 * @param constraint The constraint to apply to the target repository. For
 * example, {id: '5'}.
 * @param relationMetadata The relation metadata used to used to describe the
 * relationship and determine how to apply the constraint.
 * @param targetRepository The repository which represents the target model of a
 * relation attached to a datasource.
 *
 */
function hasManyRepositoryFactory(sourceModelId, relationMetadata, targetRepository) {
    switch (relationMetadata.type) {
        case relation_decorator_1.RelationType.hasMany:
            const fkConstraint = { [relationMetadata.keyTo]: sourceModelId };
            return new relation_repository_1.DefaultHasManyEntityCrudRepository(targetRepository, fkConstraint);
    }
}
exports.hasManyRepositoryFactory = hasManyRepositoryFactory;
//# sourceMappingURL=relation.factory.js.map