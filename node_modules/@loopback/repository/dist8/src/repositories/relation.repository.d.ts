import { EntityCrudRepository } from './repository';
import { DataObject, AnyObject, Options } from '../common-types';
import { Entity } from '../model';
import { Filter, Where } from '../query';
/**
 * CRUD operations for a target repository of a HasMany relation
 */
export interface HasManyEntityCrudRepository<T extends Entity> {
    /**
     * Create a target model instance
     * @param targetModelData The target model data
     * @param options Options for the operation
     * @returns A promise which resolves to the newly created target model instance
     */
    create(targetModelData: Partial<T>, options?: Options): Promise<T>;
    /**
     * Find target model instance(s)
     * @param Filter A filter object for where, order, limit, etc.
     * @param options Options for the operation
     * @returns A promise which resolves with the found target instance(s)
     */
    find(filter?: Filter, options?: Options): Promise<T[]>;
    /**
     * Delete multiple target model instances
     * @param where Instances within the where scope are deleted
     * @param options
     * @returns A promise which resolves the deleted target model instances
     */
    delete(where?: Where, options?: Options): Promise<number>;
    /**
     * Patch multiple target model instances
     * @param dataObject The fields and their new values to patch
     * @param where Instances within the where scope are patched
     * @param options
     * @returns A promise which resolves the patched target model instances
     */
    patch(dataObject: DataObject<T>, where?: Where, options?: Options): Promise<number>;
}
export declare class DefaultHasManyEntityCrudRepository<T extends Entity, TargetRepository extends EntityCrudRepository<T, typeof Entity.prototype.id>> implements HasManyEntityCrudRepository<T> {
    targetRepository: TargetRepository;
    constraint: AnyObject;
    /**
     * Constructor of DefaultHasManyEntityCrudRepository
     * @param targetRepository the related target model repository instance
     * @param constraint the key value pair representing foreign key name to constrain
     * the target repository instance
     */
    constructor(targetRepository: TargetRepository, constraint: AnyObject);
    create(targetModelData: Partial<T>, options?: Options): Promise<T>;
    find(filter?: Filter, options?: Options): Promise<T[]>;
    delete(where?: Where, options?: Options): Promise<number>;
    patch(dataObject: Partial<T>, where?: Where, options?: Options): Promise<number>;
}
