import { ParameterObject, ParameterLocation, ReferenceObject, SchemaObject } from '@loopback/openapi-v3-types';
/**
 * Describe an input parameter of a Controller method.
 *
 * `@param` must be applied to parameters. For example,
 * ```
 * class MyController {
 *   @get('/')
 *   list(
 *     @param(offsetSpec) offset?: number,
 *     @param(pageSizeSpec) pageSize?: number,
 *   ) {}
 * }
 * ```
 *
 * @param paramSpec Parameter specification.
 */
export declare function param(paramSpec: ParameterObject): (target: Object, member: string, index: number) => void;
/**
 *
 * Describe an input parameter of a Controller method. The `@param` decorator
 * takes an argument of `ParameterObject` to define how to map the parameter
 * to OpenAPI specification.
 *
 * `@param(paramSpec)` must be applied to parameters. For example,
 * ```ts
 * class MyController {
 *   @get('/')
 *   list(
 *     @param(offsetSpec) offset?: number,
 *     @param(pageSizeSpec) pageSize?: number,
 *   ) {}
 * }
 * ```
 *
 * @param paramSpec Parameter specification.
 *
 * Please also see `@param.*` shortcut parameter decorators
 */
export declare namespace param {
    const query: {
        string: (name: string) => (target: Object, member: string, index: number) => void;
        number: (name: string) => (target: Object, member: string, index: number) => void;
        boolean: (name: string) => (target: Object, member: string, index: number) => void;
        integer: (name: string) => (target: Object, member: string, index: number) => void;
        long: (name: string) => (target: Object, member: string, index: number) => void;
        float: (name: string) => (target: Object, member: string, index: number) => void;
        double: (name: string) => (target: Object, member: string, index: number) => void;
        byte: (name: string) => (target: Object, member: string, index: number) => void;
        binary: (name: string) => (target: Object, member: string, index: number) => void;
        date: (name: string) => (target: Object, member: string, index: number) => void;
        dateTime: (name: string) => (target: Object, member: string, index: number) => void;
        password: (name: string) => (target: Object, member: string, index: number) => void;
    };
    const header: {
        string: (name: string) => (target: Object, member: string, index: number) => void;
        number: (name: string) => (target: Object, member: string, index: number) => void;
        boolean: (name: string) => (target: Object, member: string, index: number) => void;
        integer: (name: string) => (target: Object, member: string, index: number) => void;
        long: (name: string) => (target: Object, member: string, index: number) => void;
        float: (name: string) => (target: Object, member: string, index: number) => void;
        double: (name: string) => (target: Object, member: string, index: number) => void;
        byte: (name: string) => (target: Object, member: string, index: number) => void;
        binary: (name: string) => (target: Object, member: string, index: number) => void;
        date: (name: string) => (target: Object, member: string, index: number) => void;
        dateTime: (name: string) => (target: Object, member: string, index: number) => void;
        password: (name: string) => (target: Object, member: string, index: number) => void;
    };
    const path: {
        string: (name: string) => (target: Object, member: string, index: number) => void;
        number: (name: string) => (target: Object, member: string, index: number) => void;
        boolean: (name: string) => (target: Object, member: string, index: number) => void;
        integer: (name: string) => (target: Object, member: string, index: number) => void;
        long: (name: string) => (target: Object, member: string, index: number) => void;
        float: (name: string) => (target: Object, member: string, index: number) => void;
        double: (name: string) => (target: Object, member: string, index: number) => void;
        byte: (name: string) => (target: Object, member: string, index: number) => void;
        binary: (name: string) => (target: Object, member: string, index: number) => void;
        date: (name: string) => (target: Object, member: string, index: number) => void;
        dateTime: (name: string) => (target: Object, member: string, index: number) => void;
        password: (name: string) => (target: Object, member: string, index: number) => void;
    };
    /**
     * Define a parameter of `array` type.
     *
     * @example
     * ```ts
     * export class MyController {
     *   @get('/greet')
     *   greet(@param.array('names', 'query', {type: 'string'}) names: string[]): string {
     *     return `Hello, ${names}`;
     *   }
     * }
     * ```
     *
     * @param name Parameter name
     * @param source Source of the parameter value
     * @param itemSpec Item type for the array or the full item object
     */
    const array: (name: string, source: ParameterLocation, itemSpec: SchemaObject | ReferenceObject) => (target: Object, member: string, index: number) => void;
}
